import pygame
import random
import math
#import variables
from variables import *
pygame.init()

upPressed = False

g= 9.8 #newton's gravatational constant
rvx = 50 #horizontal veloctiy
rvy = 50 #vertical velocity
tx=0 #time
ty=0
rx = xpos
ry = ypos
while PlayingGame:
  
  clocky.tick(60)
  
  while TextTime > 0:
    TextTime - 1
    

  events = pygame.event.get()
 
  for event in events:
    if event.type == pygame.QUIT:
      PlayingGame = False
      
  keys = pygame.key.get_pressed()
      
  if keys[pygame.K_p] and game_state == START:
    game_state = FISHING
  if keys[pygame.K_p] and game_state == MENU:
    game_state = FISHING

  if keys[pygame.K_m]:
    game_state = MENU

  if keys[pygame.K_i]:
    game_state = INVENTORY
  
  if keys[pygame.K_a] and game_state == MENU:
    game_state = AQUARIUM



  if game_state == FISHING:      
    if keys[pygame.K_LEFT]:
        if cast is False and xpos > 0:
         vx=-2
    if keys[pygame.K_RIGHT]:
       if cast is False and xpos  < 80:
          vx=2
        
    if keys[pygame.K_DOWN]:
        #ry+=3
        #vx = 0
        tx+=.1
        ty+=.1
        LinePower += .1
    #else: make rx and ry come back towards player
    if keys[pygame.K_UP] and rx > xpos:
         # tx-=.1
          rx -=2
          upPressed = True
    elif keys[pygame.K_UP] and rx <= xpos:
          rx = xpos
          upPressed = True
    if keys[pygame.K_UP] and ry > ypos:
          #ty-=.1
          ry -=2
          upPressed = True
    elif keys[pygame.K_UP] and ry <= ypos:
          ry = ypos
          upPressed = True
    #if xpos > 80:
     # xpos = 80  
  vx*=.95 #friction

#fishing rod physics
  if ry <= ypos:
    rx = rvx * tx +xpos
    ry = -rvy*ty + 1*g*ty*ty +ypos
  if ry > 75 and upPressed == False:
    ry+=2

    
  print("rod position is:")
  print (rx)
  print (ry)


  xpos += vx #update player position
  
  #stop player from leaving screen
  if xpos < 0:
      xpos = 0
  if xpos+20>700:
      xpos = 680
    

      
  #stop player from moving when line is down
  if ry == 0:
      cast = False
  #else:
   #   cast = True
      
  #check if you're over a hole

     
  #f1.move()
  #f2.move()
  #f3.move()

#catch the fish
  for i in range(10):
        if math.sqrt((xpos+10-school[i].xpos)**2+(ypos+18+ry-school[i].ypos)**2)<10 and school[i].caught == False:
            school[i].onHook = True
  for j in range(5):
        if math.sqrt((xpos+10-sandwich[j].xpos)**2+(ypos+18+ry-sandwich[j].ypos)**2)<10 and sandwich[j].caught == False:
            sandwich[j].onHook = True
          
  for i in range (10):
    school[i].move(xpos+10+rx, ypos+18+ry)    
  for j in range (5):
    sandwich[j].move(xpos+10+rx, ypos+18+ry)
          
  #render section-------------------------------------------------------------------------------------
  gamescreen.fill((0,0,250))

  if game_state == START:
        gamescreen.fill((0,0,180))
        print("start screen")
        gamescreen.blit(text1,(100, 100))
  
  elif game_state == FISHING:
    
    pygame.draw.rect(gamescreen, (200,200,255), (0,0,700, 100))#sky
    pygame.draw.rect(gamescreen, (239,221,111), (0,95,100, 500))
    gamescreen.blit(text5, (0,0))
  #holes in ice
  #  pygame.draw.rect(gamescreen, (0,0,0), (100, 95, 30, 5))
  #  pygame.draw.rect(gamescreen, (0,0,0), (250, 95, 30, 5))
  #  pygame.draw.rect(gamescreen, (0,0,0), (400, 95, 30, 5))
  #  pygame.draw.rect(gamescreen, (0,0,0), (550, 95, 30, 5))
    
    while TextTime > 0:
      gamescreen.blit(text2,(xpos, ypos-10))

  #f1.draw()
  #f2.draw()
  #f3.draw()
    for i in range (10):
      school[i].draw()
    for j in range (5):
      sandwich[j].draw()
  #draw player
    pygame.draw.rect(gamescreen, (200,0,0), (xpos, ypos, 20,20))

  #draw fishing bar
    #pygame.draw.rect(gamescreen, (0,255,0), (xpos+10,ypos+30, 10,LinePower))
  
  #draw line


    pygame.draw.rect(gamescreen, (0,0,0), (rx,ry, 2,1))
    pygame.draw.rect(gamescreen, (180,180, 0), (rx, ry, 10, 2))
    pygame.draw.rect(gamescreen, (180,180, 0), (rx+20, ry+12, 2, 5))


  elif game_state == MENU:
    gamescreen.fill((0,25,200))
    gamescreen.blit(text3, (100,100))
    gamescreen.blit(text6,(50,150))

  elif game_state == INVENTORY:

    gamescreen.fill((150,150,160))
    gamescreen.blit(text4,(200,200))
    #put a loop so it draws the number of fish in a slot of the bag
    for i in bagArray:
      pygame.draw.ellipse(gamescreen, (50, 200, 40), (20, 20, 25, 15))
      pygame.draw.polygon(gamescreen, (50, 200, 40), ((20, 20), (200+30, 200+15), (200+20, 200+5)))
      pygame.draw.circle(gamescreen, (0,0,0), (200+5, 200+5), 3)

  elif game_state == AQUARIUM:
   
    gamescreen.fill((0,10,240))
    gamescreen.blit(text5, (0,0))
    for i in range (bagArray[0]):
      school[i].draw()
    for i in range (bagArray[1]):
      sandwich[i].draw()
  
  pygame.display.flip()


pygame.quit()
